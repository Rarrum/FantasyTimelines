module;

#include <string>
#include <vector>
#include <cstdint>

export module WorldState:Characters;
import :World;
import :Resources;

// A single attribute of a character.
export struct CharacterIntegerStat final
{
    std::string Name;
    int32_t Value = 0;
};

// A set of modifications to a character.
export struct CharacterModifier final
{
    std::string Name;
    //TODO: set of modifiers (stats, add abilities, etc)
};

// A character class and level.
export struct CharacterClass final
{
    std::string Class;
    std::string Subclass;
    int32_t Level;
};

// The state of a character at a point in time.
// Characters have BaseStats as a starting point, then a series of effects are computed on top of that to determine their current (final) state.
export struct Character final : public WorldElement
{
    std::vector<CharacterIntegerStat> BaseStats; // hp, strength (as rolled), etc - prior to applying class/species/etc
    std::vector<CharacterIntegerStat> FinalStats; // after applying species traits, class stuff, effects, etc - TODO: We just don't save/load this field?

    std::vector<CharacterModifier> Species;
    std::vector<CharacterModifier> Backgrounds;
    std::vector<CharacterModifier> Feats;

    std::vector<CharacterClass> Classes;

    std::vector<CharacterModifier> TransientEffects;

    //TODO: Is "current hp" and "temp hp" a resource, leaving max hp to base?
    std::vector<Spell> Spells; //TODO: prepared vs not?
    std::vector<Item> Items;

    void ComputeFinalStats()
    {
        FinalStats = BaseStats;
        //TODO: actually do stuff
    }
};

//TODO: Some unique id, so multiple characters could have the same name (or names can change)?  For now just assuming name is unique.
export const Character* FindCharacter(const World &world, const std::string &name)
{
    for (auto &e : world.Elements)
    {
        const Character *c = dynamic_cast<const Character*>(&*e);
        if (c && c->Name == name)
            return c;
    }

    return nullptr;
}

export Character CreateTempTestCharacter(const std::string &name)
{
    Character c;
    c.Name = name;

    c.Classes.emplace_back(CharacterClass{.Class = "Wizard", .Subclass = "Cat Wizard", .Level = 1});

    c.Species.emplace_back(CharacterModifier{.Name = "Cat"});
    c.Backgrounds.emplace_back(CharacterModifier{.Name = "Neighborhood Cat"});
    c.Feats.emplace_back(CharacterModifier{.Name = "Catnip Enthusiast"});

    c.BaseStats.emplace_back(CharacterIntegerStat{.Name = "Strength", .Value = 9});
    c.BaseStats.emplace_back(CharacterIntegerStat{.Name = "Dexterity", .Value = 11});
    c.BaseStats.emplace_back(CharacterIntegerStat{.Name = "Constitution", .Value = 13});
    c.BaseStats.emplace_back(CharacterIntegerStat{.Name = "Intelligence", .Value = 15});
    c.BaseStats.emplace_back(CharacterIntegerStat{.Name = "Wisdom", .Value = 17});
    c.BaseStats.emplace_back(CharacterIntegerStat{.Name = "Charisma", .Value = 19});

    c.Spells.emplace_back(Spell{.Name = "Conjure Cats", .Level = 0, .School = "Catjuration", .Description = "Meow."});
    c.Spells.emplace_back(Spell{.Name = "Whisker Rain", .Level = 1, .School = "Meowjuration", .Description = "This is strange."});
    c.Spells.emplace_back(Spell{.Name = "Tiger Tracks", .Level = 2, .School = "Whatever", .Description = "Something about tigers or something."});
    c.Spells.emplace_back(Spell{.Name = "Cougar Claws", .Level = 3, .School = "Whatever", .Description = "Something about claws."});

    c.Items.emplace_back(Item{.Name = "Short Sword"});
    c.Items.emplace_back(Item{.Name = "Shield"});
    c.Items.emplace_back(Item{.Name = "Rations"});

    c.ComputeFinalStats();
    return c;
}

//TODO: While the original intent here was to have everything be fully generic and usable by different rulesets and world systems, that's getting kind of out of hand.
//      Perhaps we keep only some basics generic, then make named variants (DnD 5E, etc) that has more specifics baked in?

