module;

#include <string>
#include <vector>

export module WorldState:Characters;
import :World;

// A single attribute of a character.
export struct CharacterIntegerStat final
{
    std::string Name;
    int32_t Value = 0;
};

// The state of a character at a point in time.
export struct Character final : public WorldElement
{
    std::string Name;
    std::vector<CharacterIntegerStat> FluidStats; // hp etc
    std::vector<CharacterIntegerStat> PrimaryStats; // str etc
};

//TODO: Some unique id, so multiple characters could have the same name?  For now just assuming name is unique.
export const Character* FindCharacter(const World &world, const std::string &name)
{
    for (auto &e : world.Elements)
    {
        const Character *c = dynamic_cast<const Character*>(&*e);
        if (c && c->Name == name)
            return c;
    }

    return nullptr;
}
