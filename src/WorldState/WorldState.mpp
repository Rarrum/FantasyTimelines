module;

#include <vector>

import Utilities;

export module WorldState:WorldState;
import :World;
import :Timeline;

// A world and its timeline, and the current view of the world (computed from the initial world and some or all of the timeline).
export struct WorldState
{
    World InitialWorld;
    Timeline WorldTimeline;

    //TODO: Also an iter for where into the timeline this view is at?
    const World& CurrentView() const { return currentView; }

    void AddToTimelineAndUpdateView(ClonePtr<TimelineChange> change)
    {
        WorldTimeline.emplace_back(change);

        currentView = InitialWorld;
        for (const ClonePtr<TimelineChange> &c : WorldTimeline)
            c->Apply(currentView);
    }

    //TODO: caching of World along the timeline maybe, and more mechanisms to change CurrentView

private:
    World currentView;
};

// Global world state
//TODO: don't export directly, but export const accessors and stuff
export WorldState GlobalWorld;
